#+title: Program Counter
#+property: header-args :tangle Program_Counter.v
#+auto-tangle: t
#+startup: showeverything


* DESCRPTION :
The program is stored at the beginning of the memory with the first instruction at binary address 0000, the second instruction at address 0001, the third at address 0010, and so on. The program counter, which is part of the control unit, counts from 0000 to 1111. It's job is to send to the memory the address of the next instruction to be feteched and executed. It does this as follows
The program counter is reset to 0000 before each computer run. When the computer run begins, the program counter sends address 0000 to the memory. The program counter is then incremented to get 0001. After the first instruction is fetech and executed, the program counter is incremented. After the second instruction is fetched and executed the program counter sends address 0010 to the memory. In this way, the program counter is keeping track of the next instruction to be fetch and executed.
The program counter is like someone pointing a finger at a list of instructions, saying do this first, do this second, do this third, etc.

* LOGIC DIAGRAM :
[[./ProgramCounter_LogicDiagram.jpg]]
* PIN CONFIGURATION :
* VERILOG CODE :
** Module :
I have implemented the Program Counter block of the SAP-1 architecture using the SN74LS107 and SN74LS126 components as described in the above schematic. To my knowledge the open circles next to the ports of components on a schematic diagram are to indicate that the input signal should be inverted. This can be seen on ports 9 and 10 on component SN74LS107. However, when comparing the intended function of the Program Counter block with the logic of these components I found I needed to remove the inversion on the CLR_bar but not the CLK_bar to produce correct operation, this is reflected in the verilog code below. I am not sure if this is an error in my understand, my implementation of these components or the schematic diagram but this is what I have had to do to make it work so far.
#+begin_src verilog
`ifndef SN74LS107
   `define SN74LS107
   `include "7400/SN74LS107/SN74LS107.v"
`endif
`ifndef SN74LS126
   `define SN74LS126
   `include "7400/SN74LS126/SN74LS126.v"
`endif
module Program_Counter(C_P, CLK_bar, CLR_bar, E_P, address);
    input C_P;
    input CLK_bar;
    input CLR_bar;
    input E_P;
    output [3:0] address;

   wire [3:0] Q;
   SN74LS107 dualFF_1(.CLK_1(!CLK_bar), .CLR_bar_1(CLR_bar), .J_1(C_P), .K_1(C_P), .Q_1(Q[0]),
                      .CLK_2(!Q[0]), .CLR_bar_2(CLR_bar), .J_2(C_P), .K_2(C_P), .Q_2(Q[1]));
   SN74LS107 dualFF_2(.CLK_1(!Q[1]), .CLR_bar_1(CLR_bar), .J_1(C_P), .K_1(C_P), .Q_1(Q[2]),
                      .CLK_2(!Q[2]), .CLR_bar_2(CLR_bar), .J_2(C_P), .K_2(C_P), .Q_2(Q[3]));
   SN74LS126 tristateBuffer(.A(Q), .G({4{E_P}}), .Y(address));

endmodule
#+end_src
** Testbench
#+begin_src verilog
module Program_Counter_tb;
   `ifdef Program_Counter_test
   reg C_P;
   reg CLK_bar;
   reg CLR_bar;
   reg E_P;
   wire [3:0] address;

   Program_Counter DUT(C_P, CLK_bar, CLR_bar, E_P, address);
   initial begin
      CLK_bar = 1;
      forever #1 CLK_bar = ~CLK_bar;
   end
   initial begin
      // Waveform generation
      $dumpfile("Program_Counter_tb.vcd");
      $dumpvars(0, Program_Counter_tb);
      CLR_bar = 1;
      // Disable counting
      C_P = 0;
      // Enable output
      E_P = 1;
      // Clear the value
      #1;
      CLR_bar = 0;
      #1;
      CLR_bar = 1;
      #1;
      // Enable counting
      C_P = 1;
      #20;
      // Disable counting
      C_P = 0;
      #4;
      // Disable output
      E_P = 0;
      #4;
      $finish;
   end
   `endif
endmodule
#+end_src
